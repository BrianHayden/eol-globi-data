-- open existing neo4j graph
g = new Neo4jGraph('/Users/jorrit/dev/trophic/trophic-graph/data/')

-- get vertex iterator by species name:
g.idx("taxons").get('name', 'Ampelisca agassizi')

-- get first node of iterator
first = g.idx("taxons").get('name', 'Ampelisca agassizi').iterator().next()

-- get studies associated with all predators eating 'Ampelisca agassizi'
first.inE.outV.inE.outV.inE.outV.title

-- number of specimen that ate 'Ampelisca agassizi'
first.inE.outV.inE.count()

-- number of nodes in graph
g.vertices.count()
-- or 
g.V.count()

-- get me the all species is contained in at least two studies (not quite sure about this)
studies = []

g.V.out('COLLECTED').inE.outV.uniqueObject.aggregate(studies)

study1_taxon = []
shared_taxon = []

studies[0].out('COLLECTED').out('CLASSIFIED_AS').uniqueObject.aggregate(study1_taxon)
studies[0].out('COLLECTED').out('ATE').out('CLASSIFIED_AS').uniqueObject.aggregate(study1_taxon)

studies[1].out('COLLECTED').out('CLASSIFIED_AS').uniqueObject.retain(study1_taxon).aggregate(shared_taxon)
studies[1].out('COLLECTED').out('ATE').out('CLASSIFIED_AS').uniqueObject.retain(study1_taxon).aggregate(shared_taxon)

-- result -- 
gremlin> shared_taxon.name
==>Squilla empusa
==>Cynoscion arenarius
==>Polydactylus octonemus
==>Leiostomus xanthurus
==>Micropogonias undulatus
gremlin> 

-- list all predators that were collected in both studies --
g.V.in('CLASSIFIED_AS').as('x').in('COLLECTED').uniqueObject.back('x').out('CLASSIFIED_AS').name
==>Rhynchoconger flavus
==>Squilla empusa



-- give me all unique vertices that have outgoing "COLLECTED" edges
g.V.inE("COLLECTED").outV.uniqueObject

-- number of outgoing "COLLECTED" edges for the second study 
g.V.inE("COLLECTED").outV.uniqueObject.getAt(1).outE("COLLECTED").count()

-- increment a variable i whenever a outgoing edge "COLLECTED" is encoutered for the second study
-- note that the result is same as the count() method.
i=0
g.V.inE("COLLECTED").outV.uniqueObject.getAt(1).outE("COLLECTED").sideEffect{i++}

-- get all unique studies that classified species in the graph
g.V.inE("CLASSIFIED_AS").outV.inE("COLLECTED").outV.uniqueObject

--- using JUNG to calculate pageRank of nodes in the graph, see https://github.com/tinkerpop/gremlin/wiki/Using-JUNG  ---
gJung = new GraphJung(g)
pr = new PageRank<Vertex,Edge>(gJung, 0.15d) 
pr.evaluate()


--- resolving species with semantic web technology abd ---
from https://github.com/tinkerpop/gremlin/wiki/LinkedData-Sail
g = new LinkedDataSailGraph(new MemoryStoreSailGraph()) 
v = g.v('http://dbpedia.org/resource/Micropogonias_undulatus')
g.addNamespace('dbpedia','http://dbpedia.org/resource/')

